/**
 * @file baxter.cpp
 *
 * @copyright Software License Agreement (BSD License)
 * Copyright (c) 2013, Rutgers the State University of New Jersey, New Brunswick
 * All Rights Reserved.
 * For a full description see the file named LICENSE.
 *
 * Authors: Andrew Dobson, Andrew Kimmel, Athanasios Krontiris, Rahul Shome, Zakary Littlefield, Kostas Bekris
 *
 * Email: pracsys@googlegroups.com
 */
#include "simulation/systems/plants/baxter/baxter.hpp"

#include "prx/utilities/spaces/space.hpp"
#include "prx/utilities/parameters/parameter_reader.hpp"
#include "prx/utilities/definitions/string_manip.hpp"
#include "prx/utilities/definitions/random.hpp"
#include "prx/simulation/simulators/simulator.hpp"
#include "prx/simulation/collision_checking/collision_checker.hpp"

#include <boost/tuple/tuple.hpp> // boost::tie
#include <boost/assign/list_of.hpp>
#include <boost/range/adaptor/map.hpp> //adaptors
#include <pluginlib/class_list_macros.h>
#include <urdf/model.h>
#include <time.h>
#include <iostream>
#include <fstream>
#include <sys/param.h>
#include <kdl_parser/kdl_parser.hpp>
#include <kdl/chainiksolverpos_nr_jl.hpp>
#include <kdl/chainiksolvervel_pinv.hpp>
#include <kdl/chainfksolverpos_recursive.hpp>
#include <kdl/chainidsolver_recursive_newton_euler.hpp>

#define IKFAST_HAS_LIBRARY // Build IKFast with API functions
#define IKFAST_NO_MAIN // Don't include main() from IKFast
#define IKREAL_TYPE IkReal // for IKFast 56,61
double SIGN(double x);
double NORM(double a, double b, double c, double d);


double SIGN(double x) {
    return (x >= 0.0f) ? +1.0f : -1.0f;
}

double NORM(double a, double b, double c, double d) {
    return sqrt(a * a + b * b + c * c + d * d);
}

#include "ikfast.h"

/* For clocking IKFast */
#include <iostream>
#include <cstdio>
#include <ctime>


PLUGINLIB_EXPORT_CLASS(prx::packages::manipulation::baxter_t, prx::sim::system_t)

namespace prx
{
    using namespace sim;
    using namespace util;
    namespace packages
    {
        namespace manipulation
        {
            baxter_t::baxter_t()
            {
                input_path = pracsys_path + "/prx_packages/manipulation/input/baxter/";
            }

            void baxter_t::init(const parameter_reader_t* reader, const parameter_reader_t* template_reader)
            {
                manipulator_t::init(reader, template_reader);
                // root_offset[2] += 1.57; //TODO: Find the correct offset of Baxter and place it here. 
            }

            void baxter_t::create_spaces()
            {
                state_space = new space_t("Baxter", state_memory);
                input_control_space = new space_t("Baxter", control_memory);
            }

            /* Given joint angles, FK_fast_solver will populate EEconfig using forward kinematics. */
            void baxter_t::FK_fast_solver(util::config_t& EEconfig, double j1, double j2, double j3, double j4, double j5, double j6, double j7){

                IKREAL_TYPE eerot[9],eetrans[3];
                IKREAL_TYPE joints[7] = {j1, j2, j3, j4, j5, j6, j7};

                ComputeFk(joints, eetrans, eerot);

                // Convert rotation matrix to quaternion (Daisuke Miyazaki)
                double q0 = ( eerot[0] + eerot[4] + eerot[8] + 1.0f) / 4.0f;
                double q1 = ( eerot[0] - eerot[4] - eerot[8] + 1.0f) / 4.0f;
                double q2 = (-eerot[0] + eerot[4] - eerot[8] + 1.0f) / 4.0f;
                double q3 = (-eerot[0] - eerot[4] + eerot[8] + 1.0f) / 4.0f;
                if(q0 < 0.0f) q0 = 0.0f;
                if(q1 < 0.0f) q1 = 0.0f;
                if(q2 < 0.0f) q2 = 0.0f;
                if(q3 < 0.0f) q3 = 0.0f;
                q0 = sqrt(q0);
                q1 = sqrt(q1);
                q2 = sqrt(q2);
                q3 = sqrt(q3);
                if(q0 >= q1 && q0 >= q2 && q0 >= q3) {
                    q0 *= +1.0f;
                    q1 *= SIGN(eerot[7] - eerot[5]);
                    q2 *= SIGN(eerot[2] - eerot[6]);
                    q3 *= SIGN(eerot[3] - eerot[1]);
                } else if(q1 >= q0 && q1 >= q2 && q1 >= q3) {
                    q0 *= SIGN(eerot[7] - eerot[5]);
                    q1 *= +1.0f;
                    q2 *= SIGN(eerot[3] + eerot[1]);
                    q3 *= SIGN(eerot[2] + eerot[6]);
                } else if(q2 >= q0 && q2 >= q1 && q2 >= q3) {
                    q0 *= SIGN(eerot[2] - eerot[6]);
                    q1 *= SIGN(eerot[3] + eerot[1]);
                    q2 *= +1.0f;
                    q3 *= SIGN(eerot[7] + eerot[5]);
                } else if(q3 >= q0 && q3 >= q1 && q3 >= q2) {
                    q0 *= SIGN(eerot[3] - eerot[1]);
                    q1 *= SIGN(eerot[6] + eerot[2]);
                    q2 *= SIGN(eerot[7] + eerot[5]);
                    q3 *= +1.0f;
                } else {
                    printf("Error while converting to quaternion! \n");
                }
                double r = NORM(q0, q1, q2, q3);
                q0 /= r;
                q1 /= r;
                q2 /= r;
                q3 /= r;

                EEconfig.set_position(eetrans);
                EEconfig.set_xyzw_orientation(q0,q1, q2, q3);

                // printf("  Translation:  x: %f  y: %f  z: %f  \n", eetrans[0], eetrans[1], eetrans[2] );
                // printf("\n");
                // printf("     Rotation     %f   %f   %f  \n", eerot[0], eerot[1], eerot[2] );
                // printf("       Matrix:    %f   %f   %f  \n", eerot[3], eerot[4], eerot[5] );
                // printf("                  %f   %f   %f  \n", eerot[6], eerot[7], eerot[8] );
                // printf("\n");

            }

            bool baxter_t::IK_fast_solver( space_point_t* result_state, const config_t& goal_config, double freelinkVal)
            {
                IKREAL_TYPE eerot[9],eetrans[3];
                std::vector<IKREAL_TYPE> vfree(1);
                ikfast::IkSolutionList<IkReal> solutions;

                eetrans[0] = goal_config.get_position()[0];
                eetrans[1] = goal_config.get_position()[1]; 
                eetrans[2] = goal_config.get_position()[2];

                double qw, qx, qy, qz;
                qx = goal_config.get_orientation()[0];
                qy = goal_config.get_orientation()[1];
                qz = goal_config.get_orientation()[2];
                qw = goal_config.get_orientation()[3];
                const double n = 1.0f/sqrt(qx*qx+qy*qy+qz*qz+qw*qw);
                qw *= n;
                qx *= n;
                qy *= n;
                qz *= n;
                eerot[0] = 1.0f - 2.0f*qy*qy - 2.0f*qz*qz;  eerot[1] = 2.0f*qx*qy - 2.0f*qz*qw;         eerot[2] = 2.0f*qx*qz + 2.0f*qy*qw;
                eerot[3] = 2.0f*qx*qy + 2.0f*qz*qw;         eerot[4] = 1.0f - 2.0f*qx*qx - 2.0f*qz*qz;  eerot[5] = 2.0f*qy*qz - 2.0f*qx*qw;
                eerot[6] = 2.0f*qx*qz - 2.0f*qy*qw;         eerot[7] = 2.0f*qy*qz + 2.0f*qx*qw;         eerot[8] = 1.0f - 2.0f*qx*qx - 2.0f*qy*qy;


                /*Free link angle*/
                vfree[0] = freelinkVal;

                /* Timer Start */
                std::clock_t start;
                double duration;
                start = std::clock();

                bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);
               
                /*Timer End */
                duration = (std::clock() - start) / (double) CLOCKS_PER_SEC;
                
                if(bSuccess){
                    //PRX_DEBUG_COLOR("IKFast Successful. "/*<<goal_config.print()<<*/", Timer: "<<duration, PRX_TEXT_MAGENTA);
                    // std::cout << goal_config.print();
                    // printf("\t1\t%f\n", duration);
                }else{
                    //PRX_DEBUG_COLOR("IKFast Failed. "/*<<goal_config.print()<< */ ", Timer: "<<duration, PRX_TEXT_MAGENTA);
                    // std::cout << goal_config.print();
                    // printf("\t0\t%f\n", duration);
                }

                return bSuccess;

                // TODO: Call IK Fast. Note: You can change the definition if you need to pass extra information
                // You have to include the appropriate files generated by IK Fast to call the IK Fast functions.
            }
        }
    }
}





