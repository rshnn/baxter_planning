<launch>
  <rosparam command="load" file="$(find prx_input)/templates/spaces/space_types.yaml"/>

  <!-- <rosparam ns="simulation" command="load" file="$(find prx_input)/templates/applications/empty_application.yaml" /> -->
  <rosparam command="load" ns="simulation">
    application:
      type: baxter_sim_application        
  </rosparam>
  <rosparam ns="simulation" command="load" file="$(find manipulation)/input/manipulation_simulator.yaml"/>
  <rosparam command="load" ns="simulation/simulator/subsystems/consumer" file="$(find prx_input)/templates/controllers/consumer.yaml"/>
  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/manipulator" file="$(find manipulation)/input/baxter/baxter.yaml"/>

  
  <rosparam ns="simulation/simulator/subsystems/consumer/subsystems/router" file="$(find prx_input)/templates/controllers/router.yaml" />

  <!--   The start state in simulation and planning, and target SE3 configuration of the cylinder object -->


  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/manipulator" >
    initial_state: [ -0.10737865502929689,  -1.3069516297851564,  0.12808739564208985,  1.4710875739013674,  -0.10200972227783203,  1.5408836996704103,  2.340854679638672, 0, 0, 0, 0, 0, 0, 0, 1, 1]
  </rosparam>


  <rosparam ns="planning/task_planner/">
    object_target: [0.75, 0.6, 0.90, 0, 0, 0, 1]
  </rosparam>



  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/red1">
    initial_state: [0.45, 0.4, 0.90, 0, 0, 0, 1]
  </rosparam>
  <rosparam command="load" ns="planning/world_model/simulator/subsystems/red1">
    initial_state: [0.45, 0.4, 0.90, 0, 0, 0, 1]
  </rosparam>

  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/red2">
    initial_state: [0.45, 0.6, 0.90, 0, 0, 0, 1]
  </rosparam>
  <rosparam command="load" ns="planning/world_model/simulator/subsystems/red2">
    initial_state: [0.45, 0.6, 0.90, 0, 0, 0, 1]
  </rosparam>


  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/green1">
    initial_state: [0.65, 0.4, 0.90, 0, 0, 0, 1]
  </rosparam>
  <rosparam command="load" ns="planning/world_model/simulator/subsystems/green1">
    initial_state: [0.65, 0.4, 0.90, 0, 0, 0, 1]
  </rosparam>

  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/green2">
    initial_state: [0.65, 0.6, 0.90, 0, 0, 0, 1]
  </rosparam>
  <rosparam command="load" ns="planning/world_model/simulator/subsystems/green2">
    initial_state: [0.65, 0.6, 0.90, 0, 0, 0, 1]
  </rosparam>


  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/blue1">
    initial_state: [0.45, 0.5, 0.90, 0, 0, 0, 1]
  </rosparam>
  <rosparam command="load" ns="planning/world_model/simulator/subsystems/blue1">
    initial_state: [0.45, 0.5, 0.90, 0, 0, 0, 1]
  </rosparam>

  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/blue2">
    initial_state: [0.45, 0.7, 0.90, 0, 0, 0, 1]
  </rosparam>
  <rosparam command="load" ns="planning/world_model/simulator/subsystems/blue2">
    initial_state: [0.45, 0.7, 0.90, 0, 0, 0, 1]
  </rosparam>


  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/yellow1">
    initial_state: [0.65, 0.5, 0.90, 0, 0, 0, 1]
  </rosparam>
  <rosparam command="load" ns="planning/world_model/simulator/subsystems/yellow1">
    initial_state: [0.65, 0.5, 0.90, 0, 0, 0, 1]
  </rosparam>

  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/yellow2">
    initial_state: [0.65, 0.7, 0.90, 0, 0, 0, 1]
  </rosparam>
  <rosparam command="load" ns="planning/world_model/simulator/subsystems/yellow2">
    initial_state: [0.65, 0.7, 0.90, 0, 0, 0, 1]
  </rosparam>




  <rosparam ns="simulation/simulator/obstacles">
    table:
      type: obstacle
      geometries:
        -
          name: foundation
          collision_geometry:
            type: box
            dims: [0.8, 0.8, 0.2]
            material: shelf_grey
          config:
            position: [0.7, 0.43, 0.73]
            orientation: [0, 0, 0, 1]
  </rosparam>

    <rosparam ns="planning/world_model/simulator/obstacles">
    table:
      type: obstacle
      geometries:
        -
          name: foundation
          collision_geometry:
            type: box
            dims: [0.8, 0.8, 0.2]
            material: shelf_grey
          config:
            position: [0.7, 0.43, 0.73]
            orientation: [0, 0, 0, 1]
  </rosparam>


  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/red1">
    template: "red_object"
  </rosparam>

  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/red2">
    template: "red_object"
  </rosparam>


  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/green1">
    template: "green_object"
  </rosparam>

  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/green2">
    template: "green_object"
  </rosparam>


  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/blue1">
    template: "blue_object"
  </rosparam>

  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/blue2">
    template: "blue_object"
  </rosparam>


  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/yellow1">
    template: "yellow_object"
  </rosparam>

  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/yellow2">
    template: "yellow_object"
  </rosparam>




  <rosparam ns="simulation/simulator/subsystems/consumer">
    keep_last_control: false
  </rosparam>

  <rosparam ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/manipulator">
    test_config:
      position: [0.5, 0, 1]
      orientation: [0, 0.70710678, 0, 0.70710678]
    planning_contexts:
        manipulator_pc:
          type: "full_mapping"
  </rosparam>

  <node name="simulation" pkg="prx_simulation" type="prx_simulation" required="true" launch-prefix="" output="screen" args="simulation"/>


  <rosparam command="load" ns="planning">
    system_mapping:
      -
        pair: [simulator/consumer/router/manipulator, world_model/simulator/manipulator]
      -
        pair: [simulator/consumer/router/red1, world_model/simulator/red1]
      -
        pair: [simulator/consumer/router/red2, world_model/simulator/red2]
      -
        pair: [simulator/consumer/router/green1, world_model/simulator/green1]
      -
        pair: [simulator/consumer/router/green2, world_model/simulator/green2]
      -
        pair: [simulator/consumer/router/blue1, world_model/simulator/blue1]
      -
        pair: [simulator/consumer/router/blue2, world_model/simulator/blue2]
      -
        pair: [simulator/consumer/router/yellow1, world_model/simulator/yellow1]
      -
        pair: [simulator/consumer/router/yellow2, world_model/simulator/yellow2]
    consumer: simulator/consumer
    # random_seed: 14391835
    simulate: true
    visualize: true
    persistent: false
    consumer_mapping:
      - 
        pair: [simulator/consumer, full_space]
    world_model:
      type: manipulation_world_model
      num_ik_seeds: 50
      IK_databases:
        baxter_database:
          distance_metric:
            type: linear_distance_metric
          manipulator: manipulator
          samples: 10000
          deserialize_file: baxter[10000].database
  </rosparam>

  <rosparam command="load" ns="planning" file="$(find prx_input)/templates/spaces/space_types.yaml"/>
  # <rosparam command="load" ns="planning" file="$(find prx_input)/templates/planning_applications/single_query_application.yaml" />

  <rosparam command="load" ns="planning" >
    type: multi_query_application
    debug: true
    visualize: true
    simulate: true
  </rosparam>
  <rosparam command="load" ns="planning/world_model" file="$(find manipulation)/input/manipulation_simulator.yaml"/>
  <rosparam command="load" ns="planning/world_model/simulator/subsystems/manipulator" file="$(find manipulation)/input/baxter/baxter.yaml"/>

  <rosparam command="load" ns="planning/world_model/simulator/subsystems/manipulator" >
    initial_state: [ -0.10737865502929689,  -1.3069516297851564,  0.12808739564208985,  1.4710875739013674,  -0.10200972227783203,  1.5408836996704103,  2.340854679638672, 0, 0, 0, 0, 0, 0, 0, 1, 1]
  </rosparam>



  <rosparam command="load" ns="simulation/red_object" >
    type: movable_body
    object_type: cup
    max_step: 0.01
    state_space: 
      min: [-5.5, -5.5, -100, -1, -1, -1, -1]
      max: [5.5, 5.5, 100, 1, 1, 1, 1]
      scale: [0.025, 0.025, 0.05, 0.5, 0.5, 0.5, 0.5]
    input_control_space: 
      none: 4
    root_geom: body
    geometries:
      -
        name: body
        collision_geometry:
          type: cylinder
          radius: 0.02
          height: 0.14
          material: red
  </rosparam>

  <rosparam command="load" ns="simulation/blue_object" >
    type: movable_body
    object_type: cup
    max_step: 0.01
    state_space: 
      min: [-5.5, -5.5, -100, -1, -1, -1, -1]
      max: [5.5, 5.5, 100, 1, 1, 1, 1]
      scale: [0.025, 0.025, 0.05, 0.5, 0.5, 0.5, 0.5]
    input_control_space: 
      none: 4
    root_geom: body
    geometries:
      -
        name: body
        collision_geometry:
          type: cylinder
          radius: 0.02
          height: 0.14
          material: blue
  </rosparam>

  <rosparam command="load" ns="simulation/green_object" >
    type: movable_body
    object_type: cup
    max_step: 0.01
    state_space: 
      min: [-5.5, -5.5, -100, -1, -1, -1, -1]
      max: [5.5, 5.5, 100, 1, 1, 1, 1]
      scale: [0.025, 0.025, 0.05, 0.5, 0.5, 0.5, 0.5]
    input_control_space: 
      none: 4
    root_geom: body
    geometries:
      -
        name: body
        collision_geometry:
          type: cylinder
          radius: 0.02
          height: 0.14
          material: green
  </rosparam>

  <rosparam command="load" ns="simulation/yellow_object" >
    type: movable_body
    object_type: cup
    max_step: 0.01
    state_space: 
      min: [-5.5, -5.5, -100, -1, -1, -1, -1]
      max: [5.5, 5.5, 100, 1, 1, 1, 1]
      scale: [0.025, 0.025, 0.05, 0.5, 0.5, 0.5, 0.5]
    input_control_space: 
      none: 4
    root_geom: body
    geometries:
      -
        name: body
        collision_geometry:
          type: cylinder
          radius: 0.02
          height: 0.14
          material: yellow
  </rosparam>





  <rosparam command="load" ns="planning/red_object" >
    type: movable_body
    object_type: cup
    max_step: 0.01
    state_space: 
      min: [-5.5, -5.5, -100, -1, -1, -1, -1]
      max: [5.5, 5.5, 100, 1, 1, 1, 1]
      scale: [0.025, 0.025, 0.05, 0.5, 0.5, 0.5, 0.5]
    input_control_space: 
      none: 4
    root_geom: body
    geometries:
      -
        name: body
        collision_geometry:
          type: cylinder
          radius: 0.02
          height: 0.14
          material: red
  </rosparam>

  <rosparam command="load" ns="planning/blue_object" >
    type: movable_body
    object_type: cup
    max_step: 0.01
    state_space: 
      min: [-5.5, -5.5, -100, -1, -1, -1, -1]
      max: [5.5, 5.5, 100, 1, 1, 1, 1]
      scale: [0.025, 0.025, 0.05, 0.5, 0.5, 0.5, 0.5]
    input_control_space: 
      none: 4
    root_geom: body
    geometries:
      -
        name: body
        collision_geometry:
          type: cylinder
          radius: 0.02
          height: 0.14
          material: blue
  </rosparam>

  <rosparam command="load" ns="planning/green_object" >
    type: movable_body
    object_type: cup
    max_step: 0.01
    state_space: 
      min: [-5.5, -5.5, -100, -1, -1, -1, -1]
      max: [5.5, 5.5, 100, 1, 1, 1, 1]
      scale: [0.025, 0.025, 0.05, 0.5, 0.5, 0.5, 0.5]
    input_control_space: 
      none: 4
    root_geom: body
    geometries:
      -
        name: body
        collision_geometry:
          type: cylinder
          radius: 0.02
          height: 0.14
          material: green
  </rosparam>

  <rosparam command="load" ns="planning/yellow_object" >
    type: movable_body
    object_type: cup
    max_step: 0.01
    state_space: 
      min: [-5.5, -5.5, -100, -1, -1, -1, -1]
      max: [5.5, 5.5, 100, 1, 1, 1, 1]
      scale: [0.025, 0.025, 0.05, 0.5, 0.5, 0.5, 0.5]
    input_control_space: 
      none: 4
    root_geom: body
    geometries:
      -
        name: body
        collision_geometry:
          type: cylinder
          radius: 0.02
          height: 0.14
          material: yellow
  </rosparam>



  <rosparam ns="planning/world_model/planning_contexts">
    manipulator_pc:
      default:
        type: "hide_mapping"
    left_full_arm:
      default:
        type: "obstacle_mapping"
      manipulation_context_info:
        full_arm_context_name: "left_full_arm"
        arm_context_name: "left_arm"
        end_effector_context_name: "left_end_effector"
        start_link: "base"
        end_link: "end_effector_left"
        ik_database: baxter_database
        left_arm_ik: true
    left_arm:
      default:
       type: "obstacle_mapping"
    left_arm_planning:
      default:
        type: "hide_mapping"
    left_end_effector:
      default:
       type: "hide_mapping"
  </rosparam>

  <rosparam ns="planning/world_model/simulator/subsystems/manipulator">
    planning_contexts:
      manipulator_pc:
        type: "full_mapping"
      left_full_arm:
        type: "baxter_left_full_arm_state_mapping"
      left_arm:
        type: "baxter_left_arm_state_mapping"
      left_end_effector:
        type: "baxter_left_gripper_state_mapping"
      left_arm_planning:
        type: "baxter_left_arm_state_mapping"
  </rosparam>



  <rosparam command="load" ns="planning/world_model/simulator/subsystems/red1">
    template: "red_object"
  </rosparam>

  <rosparam command="load" ns="planning/world_model/simulator/subsystems/red2">
    template: "red_object"
  </rosparam>



  <rosparam command="load" ns="planning/world_model/simulator/subsystems/blue1">
    template: "blue_object"
  </rosparam>

  <rosparam command="load" ns="planning/world_model/simulator/subsystems/blue2">
    template: "blue_object"
  </rosparam>



  <rosparam command="load" ns="planning/world_model/simulator/subsystems/green1">
    template: "green_object"
  </rosparam>

  <rosparam command="load" ns="planning/world_model/simulator/subsystems/green2">
    template: "green_object"
  </rosparam>



  <rosparam command="load" ns="planning/world_model/simulator/subsystems/yellow1">
    template: "yellow_object"
  </rosparam>

  <rosparam command="load" ns="planning/world_model/simulator/subsystems/yellow2">
    template: "yellow_object"
  </rosparam>

  <rosparam ns="planning/graph_query_template">
    type: manipulation_query
    query_type: add_query_points_collisions
    query_collision_type: lazy_collisions
    goal:
      type: multiple_goal_states
      distance_metric:
        type: ann_distance_metric
  </rosparam>

  <rosparam ns="planning/graph_specification_template">
    type: motion_planning_specification
    validity_checker: 
      type: world_model_validity_checker
    sampler:
      type: uniform_sampler
    distance_metric:
      type: graph_distance_metric
    local_planner:
      type: bvp_local_planner
    stopping_criteria:
      elements:
        criterion1:
          type: iteration_criterion
          condition: 300
    heuristic_search:
      type: prm_astar
  </rosparam>

  <rosparam ns="planning/task_planner/">
    type: simple_pap_tp
    full_manipulator_context_name: "manipulator_pc"
    manipulation_context_name: "left_full_arm"
    manipulation_task_planner_name: "manipulation_task_planner"
    planners:
      manipulation_task_planner:
        type: manipulation_tp
        serialize_flag: false
        planners:
          left_arm_motion_planner:
            type: "prm_star"
            visualization_bodies: ["simulator/manipulator/head_sponge"]
            visualize_graph: false
            visualize_solutions: false
            deserialize_file: "left_arm_graph.roadmap"
            space_name: "left_arm_planning"
            planning_context_name: "left_arm"
            query:
              template: graph_query_template
            specification:
              template: graph_specification_template
        grasping_planner:
          type: grasping_planner
          validity_checker: 
            type: world_model_validity_checker
          sampler:
            type: uniform_sampler
          data_folders: 
            left_full_arm: "prx_packages/manipulation/input/grasp_data/baxter_parallel_gripper/"
          max_ik_tries: 50
  </rosparam>

  <rosparam ns="planning/problems">
    pick_and_place_problem:
      specification:
        template: graph_specification_template      
      query:
        template: graph_query_template
  </rosparam>


  <node name="planning" pkg="prx_planning" type="prx_planning" required="false" launch-prefix="gdb --args" output="screen" args="planning"/>


  <include file="$(find prx_input)/templates/visualization/visualization.launch"/>

  <rosparam ns="visualization/viewer/">
    windows:
      window_1:
        xpos: 920
        ypos: 100
        width: 1000
        height: 1000
        cameras:
          perspective:
            ortho: false
            camera_type: 0
            eye: [0, 0, 2.8]
            center: [1, 0, 0]
            speed: {move: 0.1, rotate: 0.001}
          orthographic:
            ortho: true
            ortho_param:
              left: -300
              right: 300
              bottom: -300
              top: 300
              zNear: 0
              zFar: 1000
            speed: {move: 0.2, rotate: 0.001}
          smooth:
            ortho: false
            camera_type: 2
            eye: [0, -20, 15]
            center: [0, 1, 18]
            speed: {move: 0.2, rotate: 0.001}
  </rosparam>

</launch>